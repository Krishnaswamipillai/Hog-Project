
"""The Game of Hog."""
from dice import four_sided, six_sided, make_test_dice
from ucb import main, trace, log_current_line, interact


GOAL_SCORE = 100 # The goal of Hog is to score 100 points.

######################
# Phase 1: Simulator #
######################

# Taking turns

def roll_dice(num_rolls, dice):
   """Rolls DICE for NUM_ROLLS times.  Returns either the sum of the outcomes,
   or 1 if a 1 is rolled (Pig out). This calls DICE exactly NUM_ROLLS times.

   num_rolls:  The number of dice rolls that will be made.
   dice:       A zero-argument function that returns an integer outcome.
   """
   # These assert statements ensure that num_rolls is a positive integer.
   assert type(num_rolls) == int, 'num_rolls must be an integer.'
   assert num_rolls > 0, 'Must roll at least once.'
   diceTotal = 0
   for rollNumber in range (0,num_rolls):
       diceValue = dice()
       if diceValue!=1:
           diceTotal = diceTotal +diceValue
       else:
           return 1
   return diceTotal 

def take_turn(num_rolls, opponent_score, dice):
   """Simulates a turn rolling NUM_ROLLS dice, which may be 0 (Free bacon).

   num_rolls:       The number of dice rolls that will be made.
   opponent_score:  The total score of the opponent.
   dice:            A function of no args that returns an integer outcome.
   """
   assert type(num_rolls) == int, 'num_rolls must be an integer.'
   assert num_rolls >= 0, 'Cannot roll a negative number of dice.'
   assert num_rolls <= 10, 'Cannot roll more than 10 dice.'
   assert opponent_score < 100, 'The game should be over.'
   if num_rolls != 0:
       return roll_dice(num_rolls,dice)
   else:
       return max(map(int, str(opponent_score)))

# Playing a game

def select_dice(score, opponent_score):
   """Selects six-sided dice unless the sum of SCORE and OPPONENT_SCORE is a
   multiple of 7, in which case selects four-sided dice (Hog wild).

   >>> select_dice(4, 24) == four_sided
   True
   >>> select_dice(16, 64) == six_sided
   True
   >>> select_dice(0, 0) == four_sided
   True
   """
   if (score+opponent_score)%7 == 0:
       return four_sided
   else: 
       return six_sided
   

def other(who):
   """Returns the other player, for a player WHO numbered 0 or 1.

   >>> other(0)
   1
   >>> other(1)
   0
   """
   return (1-who)

def play(strategy0, strategy1,bRollArr):
   """Simulates a game and returns the final scores of both players, with
   Player 0's score first, and Player 1's score second.

   A strategy is a function that takes two total scores as arguments
   (the current player's score, and the opponent's score), and returns a
   number of dice that the current player will roll this turn.

   strategy0:  The strategy function for Player 0, who plays first.
   strategy1:  The strategy function for Player 1, who plays second.
   """
   who = 1  # Which player is about to take a turn, 0 (first) or 1 (second)
   score0, score1 = 0, 0
   while(score0 < 100 and score1 < 100):
       if (who == 0):
           score0 += take_turn(strategy0(score0,score1),score1,select_dice(score0,score1))
       if (who == 1):
            score1 += take_turn(strategy1(score1,score0,bRollArr),score0,select_dice(score1,score0))
       if (score0 == score1*2 or score1 == score0*2):
           score0,score1 = score1,score0
       who = other(who) 
       

   return score0, score1

#######################
# Phase 2: Strategies #
#######################

# Basic Strategy

BASELINE_NUM_ROLLS = 5
BACON_MARGIN = 8
def always_roll(n):
   """Returns a strategy that always rolls N dice.

   A strategy is a function that takes two total scores as arguments
   (the current player's score, and the opponent's score), and returns a
   number of dice that the current player will roll this turn.

   >>> strategy = always_roll(5)
   >>> strategy(0, 0)
   5
   >>> strategy(99, 99)
   5
   """
   def strategy(score, opponent_score):
       return n
   return strategy

# Experiments

def make_averaged(fn, num_samples):
   """Returns a function that returns the average_value of FN when called.

   >>> dice = make_test_dice(3, 1, 5, 6)
   >>> averaged_dice = make_averaged(dice, 1000)
   >>> averaged_dice()
   3.75
   >>> make_averaged(roll_dice, 1000)(2, dice)
   6.0

   In this last example, two different turn scenarios are averaged.
   - In the first, the player rolls a 3 then a 1, receiving a score of 1.
   - In the other, the player rolls a 5 and 6, scoring 11.
   Thus, the average value is 6.0.
   """
   def returnAverage(*args):
       total = 0
       for i in range (0,num_samples):
           total = total + fn(*args)
       return total/num_samples
   return returnAverage
def max_scoring_num_rolls(dice=six_sided):
   """Return the number of dice (1 to 10) that gives the highest average turn
   score by calling roll_dice with the provided DICE.

   >>> dice = make_test_dice(3)
   >>> max_scoring_num_rolls(dice)
   1 dice scores 3.0 on average
   2 dice scores 6.0 on average
   3 dice scores 9.0 on average
   4 dice scores 12.0 on average
   5 dice scores 15.0 on average
   6 dice scores 18.0 on average
   7 dice scores 21.0 on average
   8 dice scores 24.0 on average
   9 dice scores 27.0 on average
   10 dice scores 30.0 on average
   10
   """
   highest = 0
   for i in range (1,11):
       print(i, "dice scores", make_averaged(roll_dice,10000)(i,dice), "on average")
       if(make_averaged(roll_dice,1000)(i,dice) > highest):
           highest = make_averaged(roll_dice,1000)(i,dice)
   return highest

def winner(strategy0, strategy1, bRollArr):
   """Returns 0 if strategy0 wins against strategy1, and 1 otherwise."""
   score0, score1 = play(strategy0, strategy1, bRollArr)
   if score0 > score1:
       return 0
   else:
       return 1

def average_win_rate(strategy, baseline=always_roll(BASELINE_NUM_ROLLS)):
   """Returns the average win rate (0 to 1) of STRATEGY against BASELINE."""
   win_rate_as_player_0 = 1 - make_averaged(winner)(strategy, baseline)
   win_rate_as_player_1 = make_averaged(winner)(baseline, strategy)
   return (win_rate_as_player_0 + win_rate_as_player_1) / 2 # Average results

def run_experiments():
   """Runs a series of strategy experiments and report results."""
   if True: # Change to False when done finding max_scoring_num_rolls
       six_sided_max = max_scoring_num_rolls(six_sided)
       print('Max scoring num rolls for six-sided dice:', six_sided_max)
       four_sided_max = max_scoring_num_rolls(four_sided)
       print('Max scoring num rolls for four-sided dice:', four_sided_max)

   if False: # Change to True to test always_roll(8)
       print('always_roll(8) win rate:', average_win_rate(always_roll(8)))

   if False: # Change to True to test bacon_strategy
       print('bacon_strategy win rate:', average_win_rate(bacon_strategy))

   if False: # Change to True to test swap_strategy
       print('swap_strategy win rate:', average_win_rate(swap_strategy))

   if False: # Change to True to test final_strategy
       print('final_strategy win rate:', average_win_rate(final_strategy))

   "*** You may add additional experiments as you wish ***"

# Strategies

def bacon_strategy(score, opponent_score):
   """This strategy rolls 0 dice if that gives at least BACON_MARGIN points,
   and rolls BASELINE_NUM_ROLLS otherwise.

   >>> bacon_strategy(0, 0)
   5
   >>> bacon_strategy(70, 50)
   5
   >>> bacon_strategy(50, 70)
   0
   """
   if max(map(int, str(opponent_score))) >= BACON_MARGIN :
       return 0
   else:
       return BASELINE_NUM_ROLLS
def swap_strategy(score, opponent_score):
   """This strategy rolls 0 dice when it would result in a beneficial swap and
   rolls BASELINE_NUM_ROLLS if it would result in a harmful swap. It also rolls
   0 dice if that gives at least BACON_MARGIN points and rolls
   BASELINE_NUM_ROLLS otherwise.

   >>> swap_strategy(23, 60) # 23 + (1 + max(6, 0)) = 30: Beneficial swap
   0
   >>> swap_strategy(27, 18) # 27 + (1 + max(1, 8)) = 36: Harmful swap
   5
   >>> swap_strategy(50, 80) # (1 + max(8, 0)) = 9: Lots of free bacon
   0
   >>> swap_strategy(12, 12) # Baseline
   5
   """
   if max(map(int, str(opponent_score))) + score == opponent_score/2:
       return 0
   if max(map(int, str(opponent_score))) + score == opponent_score*2:
       return BASELINE_NUM_ROLLS
   if max(map(int, str(opponent_score))) + score >= BACON_MARGIN:
       return 0
   else:
       return BASELINE_NUM_ROLLS

#Calculates score difference after a full turn (both players). Used in bestRollArray to predict following turn. 
def scoreDiffAfterRoll(score0,score1,rollNum):
   score1 = score1 + take_turn(rollNum,score0,select_dice(score1,score0))
   if (score0 == score1*2 or score1 == score0*2):
      score1,score0 = score0,score1
   if(score1 < 100 and score0 < 100):
      score0 = score0 + take_turn(5,score1,select_dice(score0,score1))
      if (score0 == score1*2 or score1 == score0*2):
         score1,score0=score0,score1
   return (score1 - score0)

#Caclulates optimum dice roll number for any score difference.
def bestRollArray():
   bRArray = [[0 for x in range(100)] for y in range(100)]
   for score1 in range(100):
         bRollArr=[]
         for score0 in range(100):
            bestScoreDiff = -100
            bestRoll = 0
            for rollNum in range (0,11):
               averageScoreDiff = (make_averaged(scoreDiffAfterRoll, 1000)(score0,score1,rollNum))
               if (averageScoreDiff > bestScoreDiff):
                    bestScoreDiff = averageScoreDiff
                    bestRoll = rollNum
            bRArray[score1][score0] = bestRoll
            bRollArr.append(bestRoll)
         print(bRollArr,",")   
   return bRArray


def final_strategy(score, opponent_score,bestRollArr):
   if(max(map(int, str(opponent_score))) + score >= 100):
      return 0
   else:
      return int(bestRollArr[score][opponent_score])

# Example bArr produced by bestRollArray(). Pickle could be used to save this to computer but for the lack of file space on said computer :( 
bArr = [[4, 7, 5, 7, 6, 8, 6, 0, 8, 8, 8, 8, 5, 9, 2, 5, 2, 6, 6, 0, 5, 4, 3, 6, 3, 7, 4, 7, 0, 5, 4, 4, 5, 6, 5, 0, 4, 6, 5, 6, 5, 5, 7, 5, 6, 5, 6, 7, 6, 0, 6, 6, 7, 6, 6, 6, 0, 6, 7, 6, 7, 5, 8, 0, 0, 7, 8, 6, 9, 8, 0, 7, 8, 6, 5, 5, 8, 0, 9, 7, 9, 8, 6, 0, 0, 6, 5, 5, 6, 0, 7, 0, 0, 6, 0, 5, 0, 8, 0, 0] ,
[6, 5, 6, 5, 7, 5, 0, 7, 7, 6, 9, 7, 9, 2, 4, 0, 6, 6, 0, 0, 3, 6, 5, 3, 5, 5, 6, 0, 4, 4, 5, 4, 4, 6, 5, 4, 4, 4, 5, 0, 5, 5, 5, 6, 5, 5, 5, 6, 0, 6, 6, 6, 6, 8, 6, 3, 0, 6, 6, 7, 7, 7, 0, 7, 7, 8, 7, 8, 8, 0, 8, 5, 7, 8, 9, 9, 0, 5, 9, 0, 8, 8, 9, 0, 7, 9, 9, 5, 8, 9, 0, 8, 6, 8, 6, 0, 6, 0, 5, 0] ,
[5, 5, 8, 6, 7, 4, 7, 5, 6, 0, 7, 9, 1, 4, 4, 6, 0, 0, 0, 0, 6, 7, 5, 4, 3, 7, 3, 4, 3, 3, 3, 4, 6, 5, 4, 6, 4, 4, 4, 5, 4, 5, 5, 5, 5, 5, 5, 0, 6, 7, 6, 5, 6, 7, 4, 7, 7, 6, 7, 0, 7, 0, 7, 5, 7, 9, 7, 8, 0, 6, 8, 5, 5, 9, 9, 0, 9, 7, 9, 8, 9, 8, 0, 6, 6, 4, 8, 5, 8, 0, 0, 7, 5, 5, 0, 6, 0, 0, 6, 5] ,
[7, 6, 6, 7, 4, 6, 5, 9, 9, 0, 8, 4, 9, 4, 0, 0, 4, 5, 0, 6, 5, 4, 2, 7, 8, 3, 0, 5, 3, 3, 5, 8, 4, 4, 4, 4, 5, 5, 4, 0, 4, 5, 5, 6, 5, 5, 0, 7, 5, 5, 6, 6, 6, 0, 6, 6, 6, 6, 7, 7, 0, 0, 6, 6, 7, 8, 7, 0, 7, 8, 7, 8, 8, 8, 0, 7, 10, 7, 9, 0, 8, 0, 7, 5, 7, 9, 8, 0, 0, 9, 8, 6, 6, 0, 10, 0, 5, 5, 0, 7] ,
[5, 5, 7, 4, 5, 0, 6, 5, 5, 8, 9, 9, 0, 0, 4, 5, 4, 0, 5, 0, 7, 6, 4, 7, 3, 4, 6, 5, 3, 0, 7, 4, 5, 5, 3, 3, 3, 4, 0, 4, 4, 5, 4, 5, 5, 5, 5, 6, 5, 5, 5, 7, 0, 6, 6, 6, 6, 6, 6, 0, 7, 6, 6, 7, 6, 7, 0, 7, 7, 7, 7, 6, 7, 0, 8, 7, 7, 8, 9, 8, 0, 6, 8, 9, 8, 9, 10, 0, 8, 5, 9, 6, 0, 6, 0, 4, 0, 6, 6, 0] ,
[6, 8, 2, 4, 5, 6, 4, 6, 0, 0, 6, 8, 9, 8, 8, 5, 1, 5, 4, 0, 4, 5, 7, 2, 4, 0, 2, 5, 2, 8, 3, 6, 3, 6, 3, 3, 6, 0, 4, 4, 4, 4, 5, 4, 5, 4, 6, 5, 5, 0, 5, 7, 5, 5, 6, 5, 6, 6, 0, 6, 6, 5, 6, 6, 6, 0, 7, 7, 7, 6, 8, 8, 0, 7, 7, 7, 8, 8, 8, 0, 8, 8, 9, 5, 8, 0, 0, 5, 9, 5, 10, 0, 8, 0, 7, 0, 6, 6, 0, 7] ,
[9, 5, 5, 4, 4, 7, 5, 7, 0, 0, 7, 7, 8, 8, 9, 1, 0, 4, 4, 4, 5, 7, 2, 6, 4, 5, 5, 5, 0, 0, 2, 6, 3, 3, 3, 6, 4, 3, 3, 3, 3, 4, 4, 5, 4, 4, 4, 6, 4, 4, 6, 5, 5, 5, 5, 5, 5, 0, 6, 5, 6, 7, 7, 6, 0, 6, 7, 6, 7, 0, 7, 0, 7, 7, 7, 7, 8, 9, 0, 9, 8, 8, 8, 9, 9, 0, 10, 8, 10, 6, 0, 10, 0, 8, 4, 0, 10, 0, 8, 0] ,
[0, 6, 5, 4, 0, 6, 8, 5, 6, 0, 7, 7, 6, 9, 3, 9, 9, 5, 4, 0, 5, 5, 4, 5, 5, 6, 0, 0, 2, 5, 2, 5, 2, 5, 8, 4, 0, 3, 3, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4, 0, 5, 5, 5, 5, 5, 7, 0, 5, 6, 6, 6, 7, 6, 0, 6, 6, 7, 7, 6, 7, 0, 5, 7, 7, 8, 7, 8, 0, 7, 8, 9, 6, 8, 8, 0, 5, 8, 6, 8, 0, 10, 0, 7, 7, 10, 5, 0, 10, 0, 8] ,
[8, 5, 5, 6, 6, 9, 3, 5, 6, 0, 6, 7, 7, 2, 7, 0, 4, 9, 10, 5, 0, 6, 7, 7, 0, 0, 7, 0, 5, 5, 2, 8, 2, 7, 3, 3, 3, 3, 3, 0, 5, 4, 3, 5, 3, 4, 4, 4, 0, 4, 4, 5, 4, 5, 5, 7, 5, 5, 5, 5, 6, 6, 0, 0, 6, 7, 7, 6, 7, 0, 6, 7, 7, 7, 7, 8, 0, 7, 7, 8, 8, 8, 8, 0, 8, 6, 9, 8, 10, 8, 0, 8, 9, 0, 8, 0, 8, 0, 7, 5] ,
[8, 6, 7, 5, 4, 0, 0, 7, 6, 5, 6, 9, 3, 7, 9, 8, 4, 4, 0, 6, 10, 0, 0, 0, 4, 6, 1, 4, 5, 5, 6, 8, 7, 3, 2, 0, 2, 4, 3, 7, 4, 3, 3, 3, 3, 4, 4, 0, 4, 4, 4, 4, 4, 4, 6, 4, 5, 6, 4, 0, 5, 0, 6, 6, 6, 6, 6, 6, 0, 0, 6, 7, 6, 7, 7, 0, 7, 7, 8, 8, 7, 7, 0, 8, 8, 8, 8, 6, 9, 0, 10, 8, 9, 8, 0, 9, 0, 4, 5, 6] ,
[6, 7, 6, 10, 4, 6, 5, 6, 5, 0, 8, 2, 7, 7, 0, 7, 8, 8, 0, 0, 3, 9, 10, 6, 7, 1, 0, 5, 3, 4, 1, 7, 2, 6, 2, 4, 2, 2, 0, 0, 3, 4, 3, 3, 3, 6, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4, 5, 5, 5, 6, 0, 6, 5, 4, 5, 6, 6, 0, 6, 5, 7, 7, 7, 7, 0, 6, 7, 6, 8, 0, 7, 0, 9, 7, 7, 8, 7, 8, 0, 5, 8, 6, 5, 0, 9, 0, 9, 10, 9, 6] ,
[5, 5, 7, 5, 7, 0, 0, 6, 5, 7, 7, 7, 6, 6, 7, 7, 9, 0, 0, 0, 5, 6, 4, 10, 10, 4, 7, 5, 1, 0, 6, 2, 1, 6, 7, 4, 2, 2, 0, 0, 2, 6, 3, 3, 6, 4, 3, 3, 3, 6, 4, 4, 5, 4, 4, 4, 4, 5, 4, 0, 5, 5, 5, 5, 5, 5, 0, 5, 5, 6, 6, 6, 7, 0, 6, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 9, 0, 9, 9, 8, 9, 0, 8, 0, 8, 9, 0, 9, 0] ,
[5, 6, 5, 7, 7, 6, 6, 7, 7, 0, 6, 5, 6, 7, 6, 8, 0, 4, 0, 0, 5, 5, 5, 3, 5, 7, 8, 7, 7, 6, 0, 4, 1, 5, 1, 6, 0, 0, 2, 2, 2, 2, 2, 6, 3, 3, 3, 3, 3, 0, 3, 5, 3, 4, 4, 5, 4, 4, 0, 5, 4, 6, 5, 5, 5, 0, 5, 5, 5, 6, 5, 7, 0, 6, 6, 6, 7, 6, 7, 0, 7, 7, 7, 7, 8, 8, 0, 8, 7, 7, 8, 0, 8, 0, 8, 9, 7, 9, 0, 7] ,
[8, 3, 9, 5, 5, 5, 0, 0, 0, 5, 7, 6, 6, 8, 8, 0, 0, 7, 0, 0, 5, 5, 6, 5, 6, 7, 6, 8, 10, 0, 6, 0, 0, 4, 0, 0, 2, 6, 1, 0, 2, 4, 2, 3, 2, 5, 3, 3, 3, 7, 4, 3, 3, 3, 3, 4, 4, 0, 4, 4, 4, 4, 4, 7, 6, 5, 5, 5, 5, 0, 6, 0, 5, 5, 6, 6, 6, 7, 0, 5, 6, 6, 7, 7, 7, 0, 7, 6, 7, 7, 0, 8, 0, 7, 8, 8, 7, 0, 8, 0] ,
[4, 5, 5, 9, 5, 4, 6, 0, 7, 8, 6, 6, 7, 7, 0, 6, 8, 7, 0, 0, 10, 4, 5, 5, 0, 5, 6, 7, 0, 10, 10, 7, 1, 0, 7, 1, 0, 6, 1, 0, 1, 5, 2, 2, 2, 5, 2, 3, 3, 0, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 4, 0, 4, 4, 5, 5, 5, 7, 0, 5, 5, 6, 6, 5, 6, 0, 6, 7, 7, 6, 6, 7, 0, 7, 7, 5, 7, 0, 7, 0, 7, 8, 8, 6, 0, 8, 0, 8] ,
[5, 5, 6, 6, 4, 6, 0, 0, 0, 6, 5, 5, 6, 7, 9, 6, 7, 8, 3, 8, 2, 5, 6, 3, 6, 7, 6, 0, 0, 0, 7, 8, 10, 7, 1, 5, 1, 1, 1, 0, 6, 2, 1, 6, 2, 2, 2, 6, 3, 3, 3, 3, 3, 3, 3, 4, 3, 6, 3, 4, 4, 4, 5, 4, 4, 5, 4, 5, 5, 0, 6, 5, 6, 5, 6, 7, 0, 5, 6, 6, 6, 7, 7, 0, 6, 7, 7, 7, 8, 7, 0, 7, 8, 6, 8, 0, 8, 0, 8, 9] ,
[6, 5, 6, 8, 6, 0, 0, 5, 6, 4, 6, 6, 5, 7, 6, 7, 7, 8, 8, 0, 5, 4, 4, 0, 4, 5, 0, 4, 0, 0, 6, 6, 6, 10, 10, 7, 1, 1, 1, 7, 0, 5, 1, 1, 1, 5, 6, 0, 0, 0, 2, 3, 2, 3, 4, 3, 3, 3, 3, 0, 4, 0, 4, 4, 4, 4, 4, 5, 0, 5, 5, 5, 5, 5, 5, 0, 5, 5, 6, 6, 6, 6, 0, 7, 7, 6, 6, 7, 7, 0, 7, 8, 7, 7, 0, 7, 0, 8, 8, 8] ,
[6, 4, 5, 6, 5, 7, 6, 7, 0, 0, 6, 5, 7, 7, 7, 6, 6, 7, 0, 0, 8, 4, 4, 6, 5, 0, 0, 0, 0, 0, 4, 8, 3, 5, 8, 9, 10, 1, 0, 0, 1, 0, 0, 4, 1, 7, 0, 0, 2, 2, 2, 2, 5, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 5, 4, 4, 4, 0, 4, 4, 5, 5, 5, 5, 0, 6, 5, 5, 6, 0, 6, 0, 6, 6, 6, 6, 5, 6, 0, 7, 7, 7, 7, 0, 7, 0, 7, 8, 7, 8] ,
[6, 7, 8, 5, 4, 0, 5, 8, 5, 7, 4, 7, 5, 6, 6, 6, 8, 0, 8, 9, 4, 9, 9, 5, 0, 5, 6, 5, 0, 0, 8, 3, 6, 6, 5, 6, 5, 10, 10, 0, 1, 6, 1, 0, 0, 0, 1, 4, 1, 2, 2, 2, 3, 2, 2, 4, 2, 5, 3, 0, 3, 3, 3, 3, 4, 4, 5, 4, 4, 4, 4, 5, 4, 0, 5, 6, 5, 5, 5, 6, 0, 5, 5, 6, 6, 6, 6, 0, 6, 7, 7, 7, 0, 7, 0, 8, 7, 8, 8, 0] ,
[6, 7, 4, 8, 6, 5, 6, 8, 0, 0, 2, 5, 5, 6, 7, 7, 0, 7, 7, 8, 9, 8, 8, 5, 5, 5, 6, 6, 4, 7, 2, 5, 6, 7, 6, 6, 8, 0, 5, 10, 10, 6, 1, 7, 1, 1, 1, 4, 1, 0, 2, 2, 2, 2, 2, 2, 3, 5, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 4, 4, 4, 4, 0, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 6, 6, 6, 0, 6, 6, 6, 7, 0, 6, 0, 7, 7, 7, 7, 0, 8] ,
[7, 4, 8, 7, 6, 4, 6, 7, 0, 5, 8, 6, 7, 4, 5, 0, 0, 5, 8, 8, 8, 8, 5, 4, 4, 6, 5, 6, 6, 0, 7, 5, 5, 0, 7, 5, 0, 6, 0, 0, 6, 9, 10, 1, 1, 4, 1, 1, 1, 6, 0, 4, 1, 2, 2, 2, 2, 0, 2, 2, 2, 3, 3, 5, 4, 3, 3, 4, 3, 0, 4, 0, 4, 5, 4, 4, 4, 5, 0, 5, 5, 6, 5, 5, 6, 0, 6, 6, 5, 6, 0, 7, 0, 6, 6, 6, 7, 0, 7, 0] ,
[3, 8, 6, 5, 5, 4, 7, 0, 5, 0, 1, 2, 5, 8, 5, 6, 5, 6, 6, 0, 7, 5, 9, 9, 5, 5, 5, 6, 0, 6, 6, 8, 0, 7, 8, 0, 0, 7, 0, 0, 7, 8, 3, 10, 10, 1, 1, 3, 1, 0, 1, 0, 0, 2, 1, 6, 2, 2, 0, 0, 2, 3, 3, 4, 3, 3, 3, 3, 3, 4, 0, 4, 4, 4, 4, 4, 4, 0, 4, 5, 5, 5, 5, 6, 0, 5, 5, 6, 6, 0, 6, 0, 6, 6, 6, 6, 0, 8, 0, 7] ,
[8, 8, 7, 5, 7, 7, 0, 6, 5, 0, 5, 5, 8, 6, 7, 0, 6, 6, 6, 8, 3, 7, 8, 10, 10, 5, 5, 0, 6, 7, 6, 7, 6, 7, 0, 6, 6, 0, 0, 0, 5, 3, 6, 3, 4, 10, 10, 7, 1, 6, 1, 1, 1, 0, 0, 2, 0, 0, 2, 2, 2, 5, 3, 3, 2, 3, 3, 4, 3, 0, 3, 4, 3, 4, 4, 6, 0, 5, 4, 4, 4, 5, 5, 0, 5, 5, 5, 5, 6, 6, 0, 5, 6, 6, 6, 0, 7, 0, 6, 8] ,
[5, 6, 5, 4, 8, 5, 0, 7, 6, 8, 4, 3, 0, 5, 5, 7, 6, 7, 0, 0, 9, 7, 8, 4, 9, 9, 4, 5, 6, 4, 7, 6, 6, 6, 6, 6, 6, 0, 0, 6, 2, 7, 7, 7, 7, 4, 6, 10, 10, 0, 1, 1, 1, 7, 1, 0, 1, 1, 1, 0, 2, 3, 2, 2, 2, 3, 3, 3, 4, 3, 3, 3, 3, 4, 3, 0, 4, 4, 4, 4, 4, 5, 0, 5, 5, 5, 5, 5, 5, 0, 5, 6, 5, 6, 0, 6, 0, 6, 6, 6] ,
[8, 7, 7, 6, 4, 8, 9, 7, 8, 0, 6, 4, 5, 6, 5, 6, 6, 6, 0, 8, 8, 7, 8, 9, 10, 4, 0, 5, 6, 6, 5, 7, 5, 7, 5, 5, 6, 6, 6, 0, 5, 5, 0, 6, 6, 6, 3, 6, 5, 10, 10, 1, 1, 1, 1, 1, 1, 6, 1, 5, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 4, 4, 4, 4, 0, 4, 0, 5, 4, 4, 5, 5, 5, 0, 5, 5, 5, 6, 0, 6, 0, 6, 6, 6, 6] ,
[6, 7, 7, 4, 7, 6, 5, 6, 5, 7, 4, 5, 0, 2, 5, 6, 8, 0, 9, 5, 7, 8, 7, 7, 4, 4, 5, 6, 6, 0, 5, 5, 6, 6, 7, 7, 6, 7, 0, 7, 4, 6, 5, 6, 8, 0, 0, 5, 0, 0, 6, 10, 10, 6, 1, 1, 1, 1, 1, 2, 1, 0, 0, 5, 2, 2, 3, 3, 2, 3, 3, 3, 3, 0, 3, 3, 3, 4, 4, 4, 5, 4, 4, 4, 4, 5, 4, 0, 5, 5, 5, 6, 0, 5, 0, 6, 6, 5, 6, 0] ,
[8, 7, 3, 9, 5, 4, 7, 5, 0, 0, 7, 6, 5, 5, 6, 6, 5, 5, 6, 6, 9, 6, 7, 3, 4, 0, 5, 5, 5, 5, 4, 7, 6, 6, 7, 7, 8, 0, 7, 5, 5, 5, 8, 10, 2, 6, 6, 0, 0, 0, 6, 3, 8, 10, 10, 6, 1, 9, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 2, 3, 3, 3, 3, 3, 3, 4, 3, 0, 3, 4, 4, 4, 4, 4, 0, 4, 4, 5, 4, 0, 5, 0, 5, 5, 6, 7, 0, 6] ,
[5, 3, 4, 7, 5, 5, 6, 8, 0, 8, 7, 4, 5, 0, 0, 5, 0, 7, 8, 0, 7, 6, 4, 8, 7, 4, 8, 5, 0, 0, 6, 5, 4, 5, 8, 6, 4, 6, 6, 8, 6, 6, 9, 0, 6, 7, 0, 0, 0, 7, 0, 4, 0, 7, 4, 8, 10, 0, 1, 5, 1, 1, 1, 8, 2, 0, 0, 0, 2, 0, 2, 0, 2, 3, 2, 3, 3, 3, 4, 3, 3, 4, 3, 4, 4, 0, 4, 4, 4, 5, 4, 5, 0, 5, 5, 5, 5, 0, 5, 0] ,
[4, 8, 6, 4, 7, 5, 7, 0, 6, 0, 8, 7, 6, 8, 5, 7, 7, 7, 6, 0, 7, 2, 7, 7, 0, 8, 4, 9, 0, 6, 5, 6, 5, 7, 6, 4, 7, 7, 7, 7, 7, 7, 0, 9, 5, 5, 5, 0, 6, 0, 5, 0, 6, 5, 6, 5, 0, 10, 10, 0, 1, 1, 1, 1, 1, 1, 1, 5, 1, 2, 0, 2, 2, 2, 2, 3, 3, 0, 3, 3, 3, 3, 3, 4, 0, 4, 4, 5, 4, 0, 4, 0, 4, 5, 5, 6, 5, 5, 0, 6] ,
[5, 7, 6, 6, 5, 7, 0, 7, 5, 4, 8, 7, 6, 6, 0, 0, 8, 5, 5, 7, 2, 8, 6, 6, 9, 8, 9, 0, 5, 0, 5, 5, 5, 7, 4, 8, 7, 6, 9, 0, 6, 5, 6, 10, 6, 8, 6, 7, 0, 0, 0, 6, 5, 6, 7, 2, 0, 7, 0, 10, 10, 7, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 0, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 4, 4, 4, 0, 4, 4, 5, 5, 0, 4, 0, 5, 6] ,
[4, 6, 6, 7, 5, 0, 0, 7, 4, 6, 7, 7, 3, 7, 6, 5, 6, 6, 8, 0, 6, 7, 8, 7, 7, 8, 0, 4, 4, 0, 6, 6, 5, 2, 6, 0, 6, 6, 7, 7, 6, 5, 5, 9, 8, 7, 8, 0, 6, 0, 6, 5, 6, 9, 0, 4, 7, 0, 0, 0, 6, 10, 10, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 3, 2, 3, 4, 3, 3, 3, 3, 4, 3, 0, 4, 4, 4, 5, 4, 5, 0, 5, 4, 5] ,
[7, 5, 8, 5, 3, 6, 5, 6, 7, 0, 9, 5, 7, 6, 4, 0, 0, 7, 0, 8, 6, 7, 6, 6, 8, 2, 0, 8, 4, 0, 4, 6, 5, 5, 6, 6, 7, 7, 0, 0, 8, 9, 6, 6, 7, 7, 5, 6, 6, 7, 8, 6, 9, 0, 6, 0, 5, 0, 0, 0, 0, 0, 6, 10, 10, 1, 1, 1, 1, 4, 1, 1, 1, 2, 2, 0, 0, 2, 0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 4, 4, 0, 4, 0, 4, 4, 4, 5] ,
[7, 9, 8, 6, 6, 0, 6, 5, 7, 8, 5, 6, 8, 8, 5, 7, 6, 0, 6, 7, 8, 7, 5, 8, 3, 9, 7, 7, 8, 0, 10, 4, 5, 6, 5, 4, 6, 6, 0, 5, 7, 6, 6, 6, 8, 4, 8, 7, 7, 6, 8, 8, 0, 5, 0, 7, 0, 0, 8, 0, 0, 6, 5, 6, 3, 10, 10, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 2, 2, 0, 2, 2, 2, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 5, 4, 4, 5, 4, 0] ,
[5, 9, 5, 9, 7, 5, 5, 7, 0, 0, 6, 6, 5, 6, 5, 7, 0, 0, 6, 6, 7, 5, 7, 3, 7, 0, 7, 7, 4, 9, 2, 5, 5, 5, 5, 6, 6, 0, 8, 5, 6, 8, 6, 5, 5, 6, 6, 7, 9, 0, 8, 0, 5, 8, 8, 6, 5, 6, 0, 0, 6, 6, 5, 6, 6, 0, 0, 10, 10, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 4, 4, 4, 4, 4] ,
[7, 3, 7, 7, 6, 6, 7, 6, 0, 0, 5, 7, 4, 9, 7, 0, 0, 5, 6, 6, 7, 8, 2, 6, 8, 7, 7, 7, 0, 0, 5, 4, 4, 6, 5, 6, 0, 8, 6, 7, 8, 7, 7, 4, 6, 6, 8, 7, 8, 7, 6, 6, 9, 5, 7, 6, 9, 0, 6, 0, 7, 0, 5, 7, 0, 0, 7, 5, 0, 9, 10, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 0, 0, 3, 2, 3, 2, 3, 3, 5, 4, 3, 3, 4, 3, 0, 4, 0] ,
[0, 6, 5, 7, 7, 5, 8, 0, 7, 5, 8, 8, 5, 8, 4, 4, 7, 0, 0, 0, 6, 5, 8, 7, 6, 7, 7, 9, 0, 0, 8, 5, 5, 6, 6, 3, 0, 6, 7, 6, 8, 9, 2, 5, 5, 6, 7, 7, 8, 0, 6, 7, 5, 6, 6, 9, 0, 7, 8, 5, 0, 0, 7, 0, 0, 2, 7, 5, 0, 0, 0, 8, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 2, 2, 0, 3, 4, 3, 3, 3, 3, 3, 4, 0, 4] ,
[5, 7, 6, 5, 6, 9, 0, 7, 8, 5, 7, 7, 6, 3, 5, 0, 5, 6, 6, 6, 5, 6, 5, 6, 6, 7, 9, 0, 8, 0, 4, 5, 4, 5, 3, 6, 5, 6, 7, 0, 8, 5, 5, 5, 5, 7, 6, 7, 0, 6, 10, 5, 7, 7, 6, 4, 9, 7, 6, 8, 8, 10, 0, 0, 7, 0, 0, 0, 8, 0, 6, 4, 5, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 0, 0, 0, 0, 2, 2, 3, 3, 0, 3, 0, 3, 3] ,
[5, 5, 7, 8, 5, 3, 0, 7, 6, 6, 9, 7, 3, 6, 4, 5, 5, 6, 0, 0, 7, 6, 6, 7, 7, 6, 0, 8, 7, 8, 4, 4, 5, 3, 6, 0, 6, 6, 5, 7, 3, 6, 5, 8, 6, 6, 7, 0, 7, 6, 8, 7, 7, 7, 5, 6, 9, 6, 5, 0, 9, 0, 0, 9, 0, 0, 0, 8, 0, 0, 0, 6, 6, 6, 6, 9, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 2, 0, 0, 3, 2, 3, 4, 3, 3, 3] ,
[5, 6, 5, 7, 5, 6, 6, 8, 6, 0, 9, 4, 6, 6, 5, 6, 5, 6, 0, 6, 6, 8, 6, 5, 5, 0, 0, 7, 7, 0, 8, 9, 5, 4, 6, 5, 4, 5, 0, 0, 7, 5, 5, 6, 6, 8, 0, 6, 5, 0, 6, 5, 7, 5, 5, 7, 4, 7, 7, 7, 6, 5, 8, 6, 7, 6, 8, 0, 0, 0, 0, 0, 0, 6, 0, 5, 5, 9, 10, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3] ,
[6, 7, 7, 2, 7, 6, 6, 7, 6, 9, 3, 5, 5, 6, 5, 5, 8, 0, 7, 0, 0, 6, 5, 6, 6, 8, 6, 7, 8, 0, 8, 4, 3, 4, 5, 5, 6, 6, 0, 5, 6, 5, 5, 6, 6, 0, 0, 5, 8, 6, 5, 6, 0, 6, 5, 6, 5, 6, 6, 0, 7, 9, 7, 6, 6, 7, 0, 6, 7, 0, 0, 0, 8, 0, 0, 0, 0, 6, 0, 10, 10, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 3, 0, 0, 2, 3, 0] ,
[5, 7, 4, 5, 4, 6, 6, 5, 9, 0, 5, 6, 6, 5, 7, 6, 0, 4, 6, 0, 7, 7, 5, 4, 8, 0, 7, 6, 7, 8, 4, 8, 4, 4, 9, 6, 6, 0, 0, 6, 4, 7, 5, 6, 2, 6, 6, 5, 6, 0, 5, 0, 8, 5, 6, 6, 7, 6, 0, 6, 9, 7, 9, 5, 5, 4, 0, 5, 6, 4, 7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 2, 2, 2, 0, 0, 3] ,
[6, 5, 4, 5, 6, 6, 7, 8, 0, 6, 5, 8, 9, 5, 7, 0, 0, 7, 5, 0, 0, 0, 4, 5, 6, 6, 6, 6, 0, 0, 3, 8, 3, 4, 4, 10, 0, 5, 5, 6, 7, 5, 7, 3, 4, 6, 6, 5, 8, 7, 0, 4, 6, 5, 5, 7, 7, 0, 8, 9, 8, 6, 5, 6, 4, 9, 7, 6, 8, 0, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 0] ,
[2, 7, 5, 6, 7, 6, 7, 0, 6, 0, 6, 5, 5, 6, 4, 6, 5, 5, 5, 0, 6, 2, 6, 5, 4, 7, 6, 6, 0, 7, 10, 8, 4, 4, 9, 5, 0, 4, 5, 6, 6, 6, 6, 6, 6, 5, 6, 6, 0, 0, 5, 0, 6, 6, 7, 5, 0, 5, 7, 7, 6, 7, 9, 4, 9, 7, 6, 5, 7, 7, 0, 6, 6, 5, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2] ,
[4, 5, 6, 5, 6, 7, 0, 7, 7, 8, 6, 7, 8, 4, 5, 0, 6, 4, 5, 4, 6, 0, 0, 6, 5, 4, 8, 0, 6, 0, 7, 7, 8, 9, 3, 4, 5, 5, 5, 0, 6, 4, 5, 6, 4, 6, 6, 7, 0, 5, 0, 5, 8, 7, 7, 0, 0, 6, 5, 0, 6, 8, 0, 0, 5, 6, 8, 7, 0, 0, 7, 5, 4, 5, 7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2] ,
[5, 6, 6, 5, 10, 4, 0, 5, 7, 0, 5, 9, 5, 8, 5, 9, 4, 5, 0, 0, 7, 6, 6, 6, 6, 7, 0, 6, 6, 6, 6, 7, 10, 2, 4, 0, 5, 5, 6, 6, 4, 5, 5, 5, 4, 7, 8, 0, 6, 6, 6, 6, 5, 8, 0, 7, 6, 7, 4, 0, 6, 0, 0, 8, 5, 8, 5, 6, 6, 6, 7, 9, 5, 6, 7, 0, 5, 6, 7, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 10, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1] ,
[7, 6, 6, 8, 0, 7, 5, 6, 5, 0, 6, 5, 6, 5, 6, 7, 8, 6, 0, 0, 4, 6, 0, 2, 8, 4, 0, 8, 8, 0, 8, 8, 3, 8, 4, 3, 4, 5, 0, 0, 6, 6, 6, 6, 4, 7, 0, 6, 5, 0, 7, 6, 7, 4, 6, 6, 7, 4, 7, 9, 0, 0, 8, 6, 5, 7, 8, 0, 6, 9, 8, 8, 7, 6, 0, 7, 6, 6, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 1, 1, 1, 1, 1, 1] ,
[5, 7, 7, 5, 4, 0, 7, 6, 5, 6, 6, 7, 7, 6, 6, 6, 6, 0, 7, 0, 5, 6, 4, 6, 5, 6, 6, 5, 5, 0, 7, 4, 7, 8, 4, 4, 4, 5, 0, 0, 5, 5, 4, 7, 6, 0, 0, 7, 8, 0, 9, 6, 0, 5, 0, 6, 6, 5, 0, 0, 0, 5, 5, 6, 5, 6, 0, 5, 6, 8, 9, 9, 9, 0, 7, 7, 8, 7, 6, 7, 0, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 1, 1, 1, 1, 0] ,
[8, 7, 4, 6, 5, 5, 8, 6, 0, 0, 6, 7, 6, 8, 9, 7, 0, 6, 0, 0, 5, 4, 8, 0, 0, 5, 4, 5, 6, 7, 2, 6, 7, 7, 3, 4, 10, 0, 5, 0, 6, 6, 7, 7, 3, 8, 5, 5, 8, 0, 8, 0, 5, 5, 6, 5, 4, 10, 0, 0, 4, 6, 5, 8, 6, 0, 0, 6, 8, 6, 7, 6, 0, 6, 7, 6, 7, 9, 7, 0, 4, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 1, 0, 1] ,
[7, 6, 6, 6, 6, 5, 6, 6, 0, 0, 6, 6, 7, 8, 6, 5, 0, 5, 9, 0, 7, 9, 4, 6, 7, 6, 4, 7, 8, 0, 7, 9, 7, 8, 8, 8, 0, 5, 5, 5, 5, 5, 7, 3, 6, 0, 5, 5, 6, 7, 2, 6, 0, 9, 4, 7, 6, 0, 8, 0, 6, 5, 6, 7, 0, 0, 6, 7, 6, 0, 8, 0, 6, 7, 9, 6, 7, 5, 0, 4, 6, 7, 6, 7, 8, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 1] ,
[3, 7, 6, 7, 7, 4, 7, 0, 0, 6, 5, 6, 7, 8, 4, 8, 7, 7, 5, 0, 10, 4, 5, 5, 0, 0, 5, 6, 0, 5, 6, 5, 7, 7, 8, 0, 0, 5, 4, 0, 6, 5, 4, 5, 4, 6, 8, 5, 0, 0, 8, 0, 7, 8, 6, 6, 0, 8, 6, 5, 6, 6, 8, 0, 0, 5, 7, 7, 5, 7, 0, 7, 7, 6, 6, 6, 6, 0, 6, 6, 6, 10, 6, 8, 0, 9, 6, 6, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 10] ,
[6, 7, 6, 7, 6, 7, 6, 8, 8, 0, 6, 8, 8, 4, 7, 0, 5, 5, 5, 10, 5, 6, 5, 8, 7, 5, 7, 0, 7, 0, 6, 7, 7, 8, 4, 7, 4, 4, 4, 0, 5, 5, 6, 7, 6, 6, 5, 6, 0, 6, 0, 6, 5, 7, 8, 0, 0, 6, 6, 7, 5, 8, 0, 0, 5, 6, 9, 6, 7, 0, 6, 6, 7, 6, 6, 6, 0, 5, 5, 5, 9, 7, 0, 6, 5, 7, 6, 4, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[6, 6, 7, 6, 7, 0, 0, 4, 0, 7, 4, 8, 2, 6, 6, 6, 9, 4, 0, 0, 6, 5, 6, 6, 9, 0, 0, 6, 6, 6, 6, 7, 8, 3, 6, 0, 9, 4, 0, 5, 4, 5, 5, 6, 6, 5, 8, 0, 5, 7, 5, 5, 7, 7, 4, 5, 7, 5, 8, 0, 5, 0, 0, 7, 5, 5, 6, 7, 0, 6, 7, 6, 6, 5, 5, 0, 7, 7, 5, 7, 6, 0, 6, 7, 8, 7, 8, 6, 6, 0, 6, 6, 0, 0, 0, 6, 0, 0, 0, 0] ,
[6, 6, 5, 9, 4, 9, 7, 7, 7, 0, 7, 5, 6, 6, 5, 9, 6, 7, 0, 0, 5, 5, 4, 6, 7, 0, 0, 5, 7, 5, 5, 8, 2, 9, 6, 9, 8, 9, 0, 0, 5, 5, 5, 5, 4, 6, 0, 5, 4, 4, 4, 7, 6, 0, 7, 0, 7, 5, 5, 7, 0, 0, 5, 6, 7, 5, 5, 0, 7, 6, 5, 4, 7, 7, 0, 5, 6, 9, 7, 0, 0, 0, 6, 4, 8, 8, 8, 7, 5, 6, 7, 10, 6, 0, 6, 0, 0, 0, 0, 0] ,
[6, 5, 6, 4, 6, 0, 6, 5, 5, 7, 3, 10, 4, 7, 8, 7, 8, 0, 8, 6, 4, 5, 6, 10, 5, 5, 0, 0, 6, 0, 7, 5, 7, 7, 8, 7, 8, 9, 0, 0, 5, 4, 5, 4, 6, 4, 0, 5, 6, 5, 8, 6, 0, 6, 6, 6, 5, 6, 0, 0, 0, 6, 6, 7, 7, 8, 0, 7, 5, 0, 5, 6, 6, 0, 5, 8, 7, 5, 6, 9, 0, 8, 7, 7, 8, 7, 0, 8, 6, 7, 7, 8, 0, 8, 0, 6, 7, 5, 0, 0] ,
[5, 10, 3, 8, 8, 6, 6, 7, 0, 0, 5, 7, 6, 6, 7, 8, 0, 6, 5, 0, 5, 7, 7, 4, 4, 0, 5, 5, 6, 6, 4, 7, 5, 6, 6, 7, 10, 0, 10, 0, 5, 4, 5, 6, 4, 5, 6, 8, 7, 0, 6, 2, 4, 6, 5, 4, 5, 9, 0, 5, 6, 6, 7, 7, 9, 0, 0, 6, 4, 6, 8, 6, 0, 5, 9, 8, 5, 5, 7, 0, 8, 7, 4, 6, 9, 7, 0, 5, 7, 7, 5, 0, 7, 0, 6, 6, 6, 6, 0, 7] ,
[6, 5, 5, 5, 0, 5, 5, 7, 0, 4, 5, 4, 7, 6, 5, 0, 0, 5, 6, 7, 5, 9, 3, 5, 7, 7, 6, 0, 0, 0, 5, 6, 7, 6, 7, 7, 0, 7, 9, 0, 9, 4, 5, 2, 5, 0, 6, 7, 6, 6, 3, 5, 0, 7, 8, 6, 6, 0, 9, 8, 6, 7, 5, 7, 0, 0, 6, 8, 6, 0, 10, 0, 6, 8, 6, 8, 4, 6, 0, 6, 6, 5, 6, 8, 0, 0, 6, 5, 6, 5, 0, 6, 6, 8, 7, 7, 6, 0, 9, 0] ,
[4, 6, 5, 7, 6, 5, 10, 0, 6, 0, 6, 6, 4, 7, 5, 7, 8, 7, 7, 0, 10, 3, 4, 5, 4, 5, 6, 7, 0, 5, 7, 7, 6, 10, 6, 0, 0, 7, 0, 8, 9, 10, 4, 5, 6, 5, 5, 6, 0, 0, 6, 7, 5, 6, 5, 6, 0, 5, 6, 4, 6, 6, 7, 0, 0, 6, 6, 6, 6, 5, 0, 5, 7, 6, 7, 6, 6, 0, 6, 7, 5, 7, 6, 6, 0, 4, 5, 5, 9, 0, 6, 0, 7, 7, 7, 6, 0, 8, 0, 7] ,
[5, 7, 7, 5, 4, 10, 0, 4, 5, 4, 5, 4, 6, 6, 7, 7, 9, 5, 8, 7, 3, 10, 4, 7, 6, 4, 7, 0, 0, 0, 10, 5, 6, 7, 2, 8, 6, 7, 7, 0, 10, 3, 4, 5, 4, 5, 5, 6, 0, 5, 0, 7, 6, 6, 9, 0, 0, 9, 7, 0, 8, 7, 0, 0, 6, 6, 6, 9, 0, 0, 5, 7, 5, 9, 7, 10, 0, 6, 5, 6, 5, 6, 9, 0, 7, 6, 7, 5, 9, 6, 0, 7, 5, 6, 10, 10, 6, 5, 8, 6] ,
[6, 8, 5, 6, 6, 0, 0, 7, 5, 7, 7, 7, 4, 6, 5, 5, 6, 4, 10, 0, 7, 6, 5, 6, 10, 10, 0, 5, 9, 5, 6, 6, 5, 5, 6, 0, 6, 6, 7, 10, 2, 10, 4, 5, 5, 4, 6, 0, 6, 4, 4, 6, 6, 8, 0, 8, 4, 5, 5, 0, 6, 0, 0, 10, 6, 7, 7, 7, 0, 0, 7, 7, 6, 6, 5, 0, 7, 6, 5, 0, 6, 7, 0, 5, 8, 5, 7, 5, 0, 0, 6, 7, 8, 6, 0, 6, 0, 5, 5, 5] ,
[9, 4, 7, 5, 5, 6, 8, 5, 0, 0, 7, 2, 6, 5, 0, 9, 6, 10, 0, 7, 7, 7, 4, 5, 10, 4, 0, 7, 6, 0, 1, 5, 4, 6, 7, 6, 6, 9, 0, 0, 9, 3, 4, 10, 5, 6, 0, 5, 6, 5, 6, 6, 5, 0, 6, 0, 5, 7, 7, 8, 0, 0, 5, 5, 6, 7, 5, 0, 6, 6, 7, 7, 8, 8, 0, 5, 7, 6, 6, 0, 0, 0, 6, 5, 7, 4, 6, 0, 0, 6, 0, 6, 5, 0, 8, 0, 7, 7, 7, 10] ,
[5, 5, 6, 2, 7, 9, 7, 4, 6, 8, 5, 6, 7, 6, 7, 6, 8, 0, 5, 0, 9, 6, 6, 8, 4, 6, 6, 6, 7, 0, 8, 3, 5, 5, 8, 7, 6, 10, 0, 0, 8, 0, 4, 4, 10, 0, 0, 6, 5, 6, 6, 7, 0, 7, 6, 6, 6, 9, 7, 0, 0, 4, 5, 9, 6, 9, 0, 7, 7, 5, 9, 4, 9, 0, 7, 8, 6, 6, 5, 8, 0, 5, 5, 10, 6, 7, 0, 0, 5, 5, 7, 0, 0, 6, 0, 6, 6, 7, 6, 0] ,
[5, 8, 3, 6, 5, 8, 6, 7, 6, 0, 6, 6, 7, 5, 5, 7, 0, 6, 5, 10, 8, 7, 8, 4, 8, 0, 6, 10, 4, 6, 0, 1, 5, 9, 6, 6, 6, 0, 7, 0, 10, 7, 4, 10, 4, 5, 5, 5, 5, 0, 7, 5, 5, 5, 6, 5, 6, 7, 0, 5, 5, 6, 6, 6, 10, 0, 0, 6, 10, 8, 6, 6, 0, 5, 5, 5, 10, 6, 0, 0, 5, 6, 7, 6, 6, 10, 0, 7, 8, 10, 0, 0, 6, 0, 6, 9, 6, 9, 0, 9] ,
[9, 6, 6, 9, 7, 9, 5, 8, 0, 5, 10, 6, 7, 5, 8, 0, 7, 7, 8, 0, 6, 9, 5, 10, 5, 7, 5, 6, 0, 0, 5, 10, 5, 7, 4, 9, 0, 7, 7, 0, 7, 10, 10, 4, 5, 0, 10, 4, 5, 6, 2, 6, 0, 5, 6, 4, 7, 0, 10, 6, 10, 6, 10, 6, 0, 0, 8, 6, 8, 0, 10, 0, 8, 8, 6, 4, 7, 8, 0, 7, 6, 9, 5, 6, 10, 0, 7, 5, 8, 6, 0, 6, 0, 7, 4, 8, 0, 0, 10, 0] ,
[2, 7, 7, 9, 7, 9, 10, 0, 9, 0, 5, 6, 5, 8, 0, 9, 6, 9, 6, 0, 9, 4, 8, 5, 7, 9, 10, 10, 0, 0, 10, 0, 1, 9, 10, 0, 0, 7, 9, 7, 10, 10, 3, 8, 4, 5, 4, 5, 0, 0, 7, 4, 8, 7, 9, 9, 0, 6, 5, 8, 9, 10, 10, 0, 0, 7, 8, 7, 6, 8, 0, 5, 9, 4, 6, 6, 7, 0, 6, 9, 6, 8, 6, 9, 0, 5, 6, 6, 5, 0, 9, 0, 8, 0, 6, 5, 0, 8, 0, 0] ,
[8, 10, 7, 7, 5, 9, 0, 5, 9, 4, 9, 6, 6, 5, 6, 9, 5, 8, 8, 10, 5, 10, 7, 9, 9, 9, 10, 0, 10, 9, 9, 6, 6, 9, 4, 8, 10, 6, 6, 0, 7, 4, 8, 10, 8, 10, 5, 5, 0, 6, 7, 7, 5, 5, 7, 0, 0, 6, 6, 9, 8, 9, 0, 0, 6, 6, 5, 5, 6, 0, 6, 10, 6, 4, 5, 7, 0, 5, 7, 7, 8, 7, 9, 0, 5, 5, 6, 6, 7, 7, 0, 0, 8, 0, 10, 0, 9, 0, 7, 5] ,
[5, 7, 7, 10, 9, 0, 0, 8, 5, 0, 6, 9, 2, 7, 6, 9, 6, 5, 0, 0, 8, 8, 6, 9, 7, 10, 0, 5, 10, 0, 10, 6, 0, 2, 6, 5, 6, 7, 6, 9, 3, 9, 9, 10, 10, 4, 9, 0, 6, 4, 5, 5, 6, 6, 0, 6, 6, 6, 6, 0, 9, 0, 0, 9, 8, 9, 7, 10, 0, 7, 9, 8, 6, 6, 10, 0, 10, 6, 6, 7, 10, 8, 0, 5, 7, 6, 5, 6, 9, 0, 9, 5, 8, 0, 0, 8, 0, 4, 9, 6] ,
[9, 8, 10, 8, 5, 10, 7, 5, 6, 0, 9, 4, 6, 6, 8, 8, 7, 7, 0, 9, 8, 6, 7, 10, 10, 5, 0, 9, 8, 10, 7, 9, 3, 5, 6, 8, 7, 8, 9, 0, 6, 8, 7, 10, 10, 9, 0, 9, 5, 10, 10, 6, 7, 0, 9, 0, 9, 8, 9, 8, 0, 0, 6, 8, 7, 5, 9, 0, 9, 9, 7, 10, 6, 10, 0, 9, 8, 10, 7, 0, 9, 0, 6, 6, 10, 9, 10, 9, 0, 9, 5, 5, 0, 0, 9, 0, 8, 9, 4, 9] ,
[9, 8, 9, 4, 5, 8, 8, 6, 5, 8, 6, 6, 7, 6, 8, 9, 6, 0, 0, 7, 10, 7, 8, 8, 3, 9, 4, 7, 8, 0, 9, 2, 8, 0, 0, 8, 10, 8, 0, 8, 9, 8, 10, 8, 9, 0, 0, 9, 5, 0, 6, 6, 4, 6, 8, 5, 8, 6, 10, 0, 0, 9, 8, 5, 8, 8, 0, 8, 9, 8, 8, 7, 8, 0, 9, 6, 9, 6, 8, 9, 0, 8, 4, 9, 10, 6, 7, 0, 10, 8, 9, 8, 0, 9, 0, 0, 5, 9, 9, 0] ,
[8, 8, 4, 9, 8, 9, 9, 9, 8, 0, 9, 7, 5, 9, 7, 8, 4, 9, 8, 7, 9, 9, 7, 2, 9, 7, 9, 9, 8, 8, 4, 7, 7, 6, 8, 9, 9, 0, 7, 9, 8, 8, 10, 8, 4, 9, 9, 9, 3, 0, 9, 4, 5, 8, 7, 9, 8, 9, 0, 7, 8, 9, 9, 8, 8, 0, 0, 8, 7, 7, 9, 8, 0, 9, 8, 8, 10, 9, 10, 0, 9, 7, 9, 9, 10, 9, 0, 8, 8, 9, 7, 0, 9, 0, 7, 6, 10, 8, 0, 8] ,
[8, 5, 8, 8, 8, 8, 7, 7, 0, 9, 5, 7, 7, 7, 7, 5, 0, 6, 9, 8, 8, 8, 2, 8, 9, 9, 9, 10, 10, 0, 8, 10, 8, 8, 0, 0, 0, 7, 9, 7, 9, 9, 8, 3, 10, 0, 9, 10, 10, 10, 0, 5, 0, 8, 7, 6, 9, 0, 8, 8, 8, 8, 8, 10, 0, 8, 8, 8, 8, 0, 8, 0, 9, 8, 7, 7, 9, 9, 0, 8, 8, 6, 7, 9, 8, 0, 8, 5, 8, 9, 0, 8, 0, 8, 7, 7, 8, 0, 8, 0] ,
[4, 8, 9, 7, 10, 9, 9, 0, 8, 8, 8, 8, 8, 8, 5, 9, 7, 9, 7, 0, 8, 6, 7, 10, 8, 9, 8, 8, 0, 9, 7, 8, 7, 8, 8, 5, 0, 7, 7, 10, 9, 8, 3, 7, 8, 8, 9, 8, 9, 0, 5, 6, 5, 7, 7, 8, 0, 8, 8, 9, 8, 7, 9, 0, 0, 8, 7, 9, 9, 9, 0, 8, 8, 8, 8, 9, 8, 0, 8, 8, 6, 9, 8, 7, 0, 8, 7, 8, 8, 0, 8, 0, 9, 5, 10, 9, 0, 9, 0, 7] ,
[6, 8, 7, 7, 8, 8, 0, 9, 8, 8, 7, 7, 9, 3, 7, 0, 8, 8, 8, 7, 4, 9, 8, 7, 7, 8, 10, 0, 8, 9, 7, 8, 8, 8, 3, 0, 0, 8, 8, 7, 9, 2, 8, 8, 9, 7, 9, 9, 0, 9, 5, 6, 7, 6, 8, 0, 0, 8, 8, 8, 7, 9, 0, 0, 10, 6, 7, 7, 8, 0, 8, 8, 6, 8, 8, 8, 0, 7, 9, 8, 8, 8, 7, 0, 7, 7, 10, 8, 9, 8, 0, 9, 9, 7, 8, 0, 9, 0, 10, 8] ,
[8, 8, 8, 7, 7, 0, 0, 8, 8, 9, 7, 8, 4, 7, 7, 7, 8, 7, 9, 0, 7, 6, 9, 9, 7, 7, 0, 8, 7, 8, 8, 9, 8, 4, 8, 8, 8, 10, 8, 8, 5, 6, 8, 8, 8, 8, 9, 0, 8, 9, 10, 10, 4, 6, 0, 7, 8, 7, 7, 0, 8, 0, 8, 8, 7, 8, 9, 8, 0, 7, 9, 7, 8, 7, 8, 0, 9, 7, 8, 6, 7, 7, 0, 8, 8, 8, 8, 8, 7, 0, 7, 7, 9, 7, 0, 9, 0, 8, 7, 7] ,
[7, 7, 7, 7, 4, 8, 7, 7, 7, 0, 7, 3, 8, 8, 7, 6, 8, 8, 0, 7, 7, 7, 6, 7, 7, 4, 8, 8, 8, 7, 7, 7, 3, 8, 8, 5, 0, 0, 7, 0, 7, 7, 7, 8, 7, 8, 0, 8, 8, 9, 8, 4, 6, 0, 6, 7, 7, 8, 7, 7, 0, 8, 7, 8, 8, 7, 7, 0, 8, 7, 8, 7, 9, 8, 0, 10, 6, 9, 8, 0, 8, 0, 7, 6, 8, 7, 7, 7, 0, 7, 8, 6, 7, 0, 7, 0, 7, 8, 7, 8] ,
[7, 8, 8, 2, 7, 6, 8, 9, 9, 8, 4, 8, 9, 8, 7, 9, 9, 0, 7, 8, 7, 8, 6, 7, 4, 8, 9, 7, 7, 0, 7, 3, 8, 7, 7, 8, 9, 8, 0, 7, 6, 7, 9, 6, 7, 0, 7, 10, 8, 9, 9, 10, 4, 6, 6, 7, 7, 7, 7, 0, 0, 8, 7, 6, 7, 7, 0, 7, 7, 7, 7, 5, 8, 0, 7, 8, 6, 7, 9, 9, 0, 7, 7, 8, 7, 7, 8, 0, 7, 8, 7, 7, 0, 8, 0, 8, 8, 8, 8, 0] ,
[6, 7, 5, 7, 6, 7, 7, 8, 8, 0, 7, 9, 6, 7, 7, 8, 0, 4, 0, 6, 6, 7, 8, 4, 8, 7, 8, 8, 6, 6, 4, 7, 9, 7, 7, 7, 8, 0, 0, 7, 8, 7, 6, 8, 3, 7, 7, 7, 9, 0, 9, 0, 10, 9, 6, 6, 7, 7, 0, 6, 8, 7, 6, 7, 8, 0, 7, 7, 7, 6, 8, 7, 0, 8, 8, 7, 7, 8, 8, 0, 8, 8, 7, 7, 8, 8, 0, 8, 7, 9, 7, 0, 8, 0, 8, 7, 8, 6, 0, 7] ,
[7, 4, 6, 7, 8, 7, 7, 7, 0, 6, 7, 7, 7, 6, 7, 3, 7, 7, 8, 7, 7, 7, 4, 7, 6, 8, 7, 8, 8, 0, 7, 8, 7, 6, 7, 7, 0, 8, 6, 6, 6, 6, 8, 2, 7, 7, 7, 8, 7, 8, 0, 9, 0, 9, 7, 7, 6, 0, 7, 8, 7, 7, 8, 7, 0, 0, 7, 7, 7, 0, 8, 0, 6, 7, 9, 7, 7, 7, 0, 7, 6, 6, 7, 7, 7, 0, 6, 7, 7, 6, 0, 6, 0, 7, 7, 6, 6, 0, 8, 0] ,
[4, 7, 7, 8, 7, 7, 7, 0, 6, 7, 7, 7, 8, 6, 3, 7, 7, 7, 7, 0, 6, 4, 7, 7, 6, 8, 7, 6, 0, 6, 7, 7, 7, 6, 6, 0, 6, 8, 0, 0, 9, 8, 8, 7, 7, 7, 8, 8, 8, 0, 8, 8, 5, 5, 6, 6, 0, 7, 7, 7, 8, 7, 6, 0, 7, 7, 7, 7, 7, 7, 0, 6, 6, 8, 7, 6, 7, 0, 7, 7, 6, 6, 7, 7, 0, 6, 6, 6, 7, 0, 7, 0, 8, 7, 7, 7, 0, 7, 0, 9] ,
[7, 7, 7, 8, 7, 7, 0, 7, 6, 7, 7, 8, 6, 7, 6, 6, 8, 7, 6, 7, 5, 8, 7, 6, 6, 8, 6, 0, 6, 6, 6, 6, 7, 7, 3, 7, 7, 6, 6, 0, 7, 5, 6, 6, 8, 6, 7, 8, 0, 7, 8, 7, 8, 6, 5, 2, 6, 6, 6, 6, 7, 6, 0, 6, 6, 6, 7, 6, 7, 0, 8, 5, 6, 6, 7, 7, 0, 7, 7, 7, 6, 7, 7, 0, 7, 6, 7, 6, 7, 6, 0, 6, 7, 6, 7, 0, 8, 0, 7, 6] ,
[6, 7, 6, 6, 7, 6, 6, 6, 8, 6, 7, 7, 8, 6, 7, 7, 7, 7, 7, 0, 5, 6, 7, 6, 6, 6, 0, 6, 7, 7, 6, 8, 7, 4, 6, 6, 6, 6, 5, 0, 0, 7, 6, 6, 6, 6, 7, 0, 7, 7, 8, 8, 9, 10, 0, 5, 6, 6, 6, 0, 6, 0, 6, 6, 6, 7, 6, 7, 0, 7, 7, 9, 6, 6, 8, 0, 7, 7, 7, 7, 6, 6, 0, 6, 9, 6, 7, 7, 6, 0, 7, 6, 5, 6, 0, 7, 0, 8, 6, 7] ,
[6, 7, 7, 7, 5, 6, 6, 8, 6, 0, 6, 6, 6, 7, 8, 6, 8, 6, 0, 7, 7, 6, 6, 6, 7, 0, 7, 8, 6, 7, 6, 7, 7, 6, 6, 6, 6, 6, 6, 0, 7, 7, 7, 5, 6, 7, 0, 6, 7, 8, 7, 7, 9, 0, 5, 6, 5, 6, 5, 6, 0, 7, 6, 7, 7, 7, 6, 0, 6, 7, 6, 6, 6, 7, 0, 7, 5, 6, 6, 0, 7, 0, 7, 6, 7, 6, 7, 7, 0, 6, 6, 5, 6, 0, 8, 0, 7, 6, 8, 6] ,
[7, 7, 8, 4, 6, 7, 7, 6, 5, 7, 8, 6, 7, 6, 6, 5, 6, 0, 6, 6, 6, 6, 5, 7, 0, 6, 5, 6, 5, 6, 6, 7, 7, 7, 6, 7, 6, 6, 0, 6, 0, 0, 7, 6, 7, 7, 6, 6, 6, 7, 7, 7, 4, 9, 5, 5, 5, 6, 6, 0, 7, 6, 6, 6, 6, 7, 0, 7, 7, 6, 6, 7, 7, 0, 7, 6, 5, 5, 6, 6, 0, 5, 7, 7, 6, 6, 5, 0, 6, 6, 5, 5, 0, 5, 0, 6, 6, 5, 5, 0] ,
[6, 6, 6, 6, 7, 6, 5, 7, 7, 0, 7, 5, 6, 5, 6, 6, 0, 7, 5, 5, 5, 5, 6, 8, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 7, 6, 6, 0, 6, 7, 6, 5, 5, 6, 7, 7, 5, 6, 6, 0, 7, 3, 8, 8, 5, 5, 5, 6, 0, 6, 5, 6, 5, 5, 7, 0, 7, 5, 6, 6, 6, 6, 0, 6, 6, 6, 6, 5, 6, 0, 6, 5, 5, 5, 5, 7, 0, 5, 5, 6, 5, 0, 6, 0, 7, 6, 7, 6, 0, 6] ,
[5, 6, 5, 5, 5, 5, 5, 7, 0, 7, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 5, 2, 4, 6, 5, 6, 5, 5, 0, 6, 5, 5, 7, 5, 6, 0, 5, 7, 7, 5, 0, 0, 6, 6, 5, 5, 6, 6, 7, 0, 6, 7, 4, 4, 5, 5, 0, 6, 5, 6, 5, 6, 5, 0, 5, 6, 5, 5, 0, 5, 0, 5, 5, 5, 6, 5, 5, 0, 6, 6, 6, 6, 5, 5, 0, 6, 7, 5, 5, 0, 6, 0, 6, 8, 5, 6, 0, 7, 0] ,
[6, 5, 7, 6, 6, 5, 5, 0, 6, 5, 6, 7, 5, 7, 3, 6, 5, 5, 5, 0, 6, 6, 5, 5, 5, 7, 5, 6, 5, 5, 5, 6, 6, 5, 6, 6, 6, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 0, 6, 6, 8, 7, 8, 5, 0, 4, 5, 5, 5, 5, 5, 0, 6, 5, 6, 7, 6, 7, 0, 5, 5, 5, 6, 5, 5, 0, 7, 5, 5, 6, 5, 6, 0, 5, 5, 5, 5, 0, 6, 0, 5, 5, 5, 6, 0, 8, 0, 7] ,
[5, 5, 5, 6, 5, 7, 0, 5, 6, 4, 5, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 4, 5, 5, 5, 5, 0, 6, 7, 5, 5, 6, 5, 5, 5, 6, 6, 5, 0, 8, 5, 0, 0, 4, 6, 6, 6, 0, 7, 6, 7, 8, 8, 8, 5, 5, 6, 5, 5, 6, 6, 0, 5, 5, 6, 5, 5, 6, 0, 4, 5, 6, 5, 4, 5, 0, 5, 5, 6, 5, 5, 5, 0, 5, 4, 5, 7, 5, 5, 0, 5, 5, 5, 5, 0, 6, 0, 5, 5] ,
[4, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 5, 9, 5, 4, 5, 6, 5, 0, 5, 5, 5, 5, 4, 6, 5, 6, 4, 6, 5, 5, 5, 5, 5, 4, 5, 6, 4, 5, 5, 4, 4, 4, 5, 5, 5, 0, 5, 5, 7, 6, 6, 8, 5, 4, 5, 5, 4, 0, 6, 5, 5, 5, 5, 5, 7, 5, 0, 5, 6, 5, 5, 5, 7, 0, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 6, 7, 5, 0, 4, 5, 5, 5, 0, 6, 0, 7, 6, 4] ,
[5, 4, 6, 4, 6, 4, 5, 5, 4, 0, 6, 5, 6, 5, 6, 4, 5, 5, 0, 4, 6, 4, 4, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 4, 6, 5, 4, 4, 0, 5, 4, 5, 0, 0, 5, 5, 4, 5, 5, 6, 6, 7, 5, 4, 4, 4, 4, 5, 5, 0, 4, 4, 5, 5, 4, 5, 0, 5, 4, 5, 4, 4, 8, 0, 7, 4, 6, 4, 0, 6, 0, 5, 4, 5, 5, 4, 6, 0, 5, 5, 4, 4, 0, 5, 0, 4, 4, 6, 4] ,
[4, 6, 5, 5, 5, 5, 4, 4, 4, 5, 4, 6, 5, 5, 5, 5, 5, 0, 4, 6, 5, 4, 6, 6, 5, 4, 4, 6, 4, 0, 5, 5, 5, 4, 5, 5, 6, 7, 0, 5, 4, 5, 4, 5, 6, 5, 4, 5, 6, 5, 5, 7, 4, 6, 7, 3, 4, 4, 5, 0, 5, 6, 4, 6, 5, 6, 6, 4, 6, 6, 4, 5, 5, 0, 4, 4, 4, 5, 4, 5, 0, 6, 5, 5, 4, 5, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 5, 0] ,
[4, 5, 4, 4, 4, 4, 4, 6, 5, 0, 4, 5, 5, 4, 4, 7, 5, 5, 6, 4, 5, 5, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 0, 4, 5, 4, 4, 4, 5, 0, 0, 4, 4, 4, 4, 5, 6, 6, 6, 7, 3, 4, 5, 0, 4, 5, 4, 4, 4, 5, 4, 5, 5, 4, 5, 4, 5, 0, 4, 4, 4, 5, 4, 6, 0, 4, 4, 4, 4, 5, 5, 0, 5, 5, 5, 4, 0, 5, 0, 4, 5, 4, 5, 0, 5] ,
[6, 4, 4, 4, 5, 4, 4, 5, 0, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 4, 5, 6, 4, 5, 3, 4, 4, 6, 4, 0, 4, 4, 4, 4, 4, 5, 5, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 3, 3, 3, 0, 4, 4, 4, 4, 4, 5, 4, 5, 5, 4, 5, 0, 6, 0, 5, 5, 5, 4, 5, 5, 0, 5, 4, 6, 4, 3, 7, 0, 5, 4, 4, 4, 0, 5, 0, 4, 6, 3, 4, 0, 6, 0] ,
[3, 4, 4, 6, 4, 4, 4, 0, 3, 0, 6, 5, 5, 4, 4, 6, 5, 4, 4, 0, 5, 3, 5, 4, 4, 3, 3, 4, 0, 0, 4, 5, 3, 4, 4, 4, 4, 4, 4, 0, 4, 5, 4, 5, 4, 0, 0, 4, 5, 0, 4, 5, 5, 5, 7, 3, 4, 4, 3, 0, 5, 4, 5, 4, 5, 3, 3, 4, 3, 0, 0, 4, 5, 3, 4, 4, 4, 0, 5, 0, 5, 4, 4, 4, 0, 3, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[4, 5, 4, 4, 4, 5, 3, 3, 0, 0, 4, 3, 4, 3, 3, 6, 6, 6, 0, 0, 3, 3, 4, 4, 5, 3, 5, 0, 0, 0, 3, 4, 3, 6, 3, 3, 5, 3, 0, 0, 5, 4, 5, 6, 4, 4, 5, 5, 0, 0, 4, 5, 7, 6, 6, 3, 3, 3, 0, 0, 4, 4, 4, 4, 3, 4, 4, 4, 0, 0, 4, 4, 5, 4, 4, 5, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[4, 6, 5, 5, 6, 3, 5, 0, 0, 0, 5, 5, 3, 4, 3, 4, 3, 0, 0, 0, 5, 5, 4, 4, 5, 5, 0, 0, 0, 0, 3, 5, 4, 3, 3, 3, 4, 0, 0, 0, 3, 4, 5, 4, 4, 3, 0, 0, 0, 0, 4, 5, 5, 6, 3, 7, 3, 0, 0, 0, 4, 3, 4, 4, 4, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[6, 3, 4, 6, 3, 5, 0, 0, 0, 0, 4, 3, 5, 3, 4, 5, 0, 0, 0, 0, 4, 4, 5, 4, 5, 3, 0, 0, 0, 0, 3, 4, 3, 3, 4, 4, 0, 0, 0, 0, 3, 3, 4, 3, 3, 6, 0, 0, 0, 0, 4, 6, 7, 2, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[4, 3, 6, 2, 4, 0, 0, 0, 0, 0, 2, 4, 4, 3, 3, 0, 7, 0, 0, 0, 5, 4, 5, 6, 2, 0, 0, 0, 0, 0, 5, 2, 3, 4, 4, 0, 0, 0, 0, 0, 5, 3, 3, 3, 4, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[3, 6, 2, 4, 0, 0, 0, 0, 0, 0, 4, 3, 4, 3, 0, 5, 0, 0, 0, 0, 3, 6, 4, 2, 0, 0, 0, 0, 0, 0, 2, 5, 4, 4, 3, 4, 5, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[5, 2, 3, 2, 4, 0, 0, 0, 0, 0, 3, 3, 4, 4, 6, 0, 0, 0, 0, 0, 5, 5, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[1, 6, 4, 4, 0, 0, 5, 0, 0, 0, 5, 4, 3, 5, 0, 0, 0, 0, 0, 0, 5, 0, 4, 4, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 6, 0, 0, 0, 0, 0, 0, 5, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ,
[5, 7, 8, 5, 8, 5, 0, 7, 6, 5, 6, 7, 8, 5, 5, 5, 8, 6, 6, 0, 5, 7, 5, 6, 7, 4, 6, 0, 7, 0, 5, 6, 6, 6, 4, 7, 6, 6, 6, 6, 6, 4, 6, 7, 6, 5, 7, 6, 0, 0, 0, 5, 5, 5, 5, 0, 6, 6, 7, 0, 8, 8, 0, 5, 5, 5, 5, 6, 5, 0, 5, 6, 4, 5, 5, 5, 0, 7, 6, 0, 7, 6, 6, 0, 4, 5, 8, 6, 7, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 7]]

##########################
# Command Line Interface #
##########################

def get_int(prompt, min):
   """Returns an integer greater than or equal to MIN, given by the user."""
   choice = input(prompt)
   while not choice.isnumeric() or int(choice) < min:
       print('Please enter an integer greater than or equal to', min)
       choice = input(prompt)
   return int(choice)

def interactive_dice():
   """A dice where the outcomes are provided by the user."""
   return get_int('Result of dice roll: ', 1)

def make_interactive_strategy(player):
   """Returns a strategy for which the user provides the number of rolls."""
   prompt = 'Number of rolls for Player {0}: '.format(player)
   def interactive_strategy(score, opp_score):
       if player == 1:
           score, opp_score = opp_score, score
       print(score, 'vs.', opp_score)
       choice = get_int(prompt, 0)
       return choice
   return interactive_strategy

def roll_dice_interactive():
   """Interactively calls roll_dice."""
   num_rolls = get_int('Number of rolls: ', 1)
   turn_total = roll_dice(num_rolls, interactive_dice)
   print('Turn total:', turn_total)

def take_turn_interactive():
   """Interactively calls take_turn."""
   num_rolls = get_int('Number of rolls: ', 0)
   opp_score = get_int('Opponent score: ', 0)
   turn_total = take_turn(num_rolls, opp_score, interactive_dice)
   print('Turn total:', turn_total)

def play_interactive():
   """Interactively calls play."""
   strategy0 = make_interactive_strategy(0)
   strategy1 = make_interactive_strategy(1)
   score0, score1 = play(strategy0, strategy1)
   print('Final scores:', score0, 'to', score1)

def main():
   print(make_averaged(winner,100000)(always_roll(5),final_strategy,bArr))

#@main
def run(*args):
   """Reads in the command-line argument and calls corresponding functions.
   """
   import argparse
   parser = argparse.ArgumentParser(description="Play Hog")
   parser.add_argument('--interactive', '-i', type=str,
                       help='Run interactive tests for the specified question')
   parser.add_argument('--run_experiments', '-r', action='store_true',
                       help='Runs strategy experiments')
   args = parser.parse_args()

   if args.interactive:
       test = args.interactive + '_interactive'
       if test not in globals():
           print('To use the -i option, please choose one of these:')
           print('\troll_dice', '\ttake_turn', '\tplay', sep='\n')
           exit(1)
       try:
           globals()[test]()
       except (KeyboardInterrupt, EOFError):
           print('\nQuitting interactive test')
           exit(0)
   elif args.run_experiments:
       run_experiments()
main()
